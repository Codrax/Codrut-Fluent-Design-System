unit CFX.Checkbox;

interface
uses
  Classes, Messages, Windows, Vcl.Controls, Vcl.Graphics,
  CFX.Colors, CFX.ThemeManager, CFX.Graphics, CFX.UIConsts, SysUtils,
  CFX.Classes;
type
  FXCheckBoxState = (cbsChecked, cbsUnchecked, cbsGrayed);

  FXCheckBox = class(TGraphicControl, FXControl)
    private
      var TextColor: TColor;
      procedure SetText(const Value: string);
      var IconRect, TextRect: TRect;
      FIconFont: TFont;
      FAllowGrayed: Boolean;
      FState: FXCheckBoxState;
      FTransparent: Boolean;
      FTextSpacing: Integer;
      FOnChange: TNotifyEvent;
      FCustomColors: FXColorSets;
      FControlState: FXControlState;
      FIconAccentColors: FXColorStateSet;
      FText: string;
      FAutomaticMouseCursor: boolean;

      //  Internal
      procedure UpdateColors;
      procedure UpdateRects;

      //  Setters
      procedure SetAllowGrayed(const Value: Boolean);
      procedure SetState(const Value: FXCheckBoxState);
      procedure SetTransparent(const Value: Boolean);
      procedure SetTextSpacing(const Value: Integer);
      procedure SetIsChecked(const Value: Boolean);

      //  Getters
      function GetIsChecked: Boolean;

      //  Messages
      procedure WM_LButtonUp(var Msg: TWMLButtonUp); message WM_LBUTTONUP;
      procedure CM_EnabledChanged(var Msg: TMessage); message CM_ENABLEDCHANGED;
      procedure CMMouseEnter(var Message : TMessage); message CM_MOUSEENTER;
      procedure CMMouseLeave(var Message: TMessage); message CM_MOUSELEAVE;
      procedure MouseDown(Button : TMouseButton; Shift: TShiftState; X, Y : integer); override;
      procedure MouseMove(Shift: TShiftState; X, Y: Integer); override;

    protected
      procedure Paint; override;
      procedure Resize; override;
      procedure ChangeScale(M, D: Integer{$IF CompilerVersion > 29}; isDpiChange: Boolean{$ENDIF}); override;

    public
      constructor Create(aOwner: TComponent); override;
      destructor Destroy; override;
      //  Interface
      function IsContainer: Boolean;
      procedure UpdateTheme(const UpdateChildren: Boolean);

    published
      property CustomColors: FXColorSets read FCustomColors write FCustomColors stored true;
      property IconFont: TFont read FIconFont write FIconFont;
      property AllowGrayed: Boolean read FAllowGrayed write SetAllowGrayed default false;
      property State: FXCheckBoxState read FState write SetState default cbsUnchecked;
      property Transparent: Boolean read FTransparent write SetTransparent default true;
      property TextSpacing: Integer read FTextSpacing write SetTextSpacing default 6;
      property IsChecked: Boolean read GetIsChecked write SetIsChecked default false;
      property OnChange: TNotifyEvent read FOnChange write FOnChange;
      //property AutomaticCursorPointer: boolean read FAutomaticMouseCursor write FAutomaticMouseCursor;

      property Text: string read FText write SetText;

      //  Modify default props
      property ParentColor default true;
  end;

implementation

//  INTERFACE
function FXCheckBox.IsContainer: Boolean;
begin
  Result := false;
end;
procedure FXCheckBox.MouseDown(Button: TMouseButton; Shift: TShiftState; X,
  Y: integer);
begin
  inherited;
  FControlState := csPress;
  Paint;
end;

procedure FXCheckBox.MouseMove(Shift: TShiftState; X, Y: Integer);
begin
  inherited;
  if Self.FAutomaticMouseCursor then
    if PtInRect(IconRect, Point(X, Y)) then
      Self.Cursor := crHandPoint
    else
      Self.Cursor := crDefault;
end;

procedure FXCheckBox.UpdateTheme(const UpdateChildren: Boolean);
begin
  UpdateColors;
  UpdateRects;
  Invalidate;
  //  Do not update children
end;

//  INTERNAL
procedure FXCheckBox.UpdateColors;
var
  AccentColor: TColor;
begin
  if not Enabled then
    begin
      FIconAccentColors := FXColorStateSet.Create($808080,
                                ChangeColorLight($808080, ACCENT_DIFFERENTIATE_CONST),
                                ChangeColorLight($808080, -ACCENT_DIFFERENTIATE_CONST));
      TextColor := $808080;
    end
  else
    begin
      // Design Mode
      if IsDesigning then
        begin
          TextColor := $000000;

          Exit;
        end;

      // Access theme manager
      if FCustomColors.Enabled then
        begin
          // Custom Colors
          AccentColor := FCustomColors.Accent;
          if ThemeManager.DarkTheme then
            TextColor := FCustomColors.DarkForeGround
          else
            TextColor := FCustomColors.LightForeGround;
        end
      else
        begin
          // Global Colors
          AccentColor := ThemeManager.AccentColor;
          if ThemeManager.DarkTheme then
            TextColor := $FFFFFF
          else
            TextColor := $000000;
        end;

      FIconAccentColors := FXColorStateSet.Create(AccentColor,
                              ChangeColorLight(AccentColor, ACCENT_DIFFERENTIATE_CONST),
                              ChangeColorLight(AccentColor, -ACCENT_DIFFERENTIATE_CONST));
    end;
end;

procedure FXCheckBox.UpdateRects;
begin
  IconRect := Rect(0, 0, Height, Height);   //  Left square
  TextRect := Rect(Height + TextSpacing, 0, Width, Height);
end;

//  SETTERS
procedure FXCheckBox.SetAllowGrayed(const Value: Boolean);
begin
  if Value <> FAllowGrayed then
    begin
      FAllowGrayed := Value;
      if (not Value) and (FState = cbsGrayed) then
        begin
          FState := cbsUnchecked;
          Invalidate;
        end;
    end;
end;

procedure FXCheckBox.SetState(const Value: FXCheckBoxState);
begin
  if Value <> FState then
    begin
      FState := Value;
      if Assigned(FOnChange) then
        FOnChange(Self);
      Invalidate;
    end;
end;

procedure FXCheckBox.SetTransparent(const Value: Boolean);
begin
  if Value <> FTransparent then
    begin
      FTransparent := Value;
      Invalidate;
    end;
end;

procedure FXCheckBox.SetText(const Value: string);
begin
  FText := Value;

  Invalidate;
end;

procedure FXCheckBox.SetTextSpacing(const Value: Integer);
begin
  if Value <> FTextSpacing then
    begin
      FTextSpacing := Value;
      UpdateRects;
      Invalidate;
    end;
end;

procedure FXCheckBox.SetIsChecked(const Value: Boolean);
begin
  if Value then
    State := cbsChecked
  else
    State := cbsUnchecked;
end;
//  GETTERS
function FXCheckBox.GetIsChecked;
begin
  Result := State <> cbsUnchecked;
end;
//  MAIN CLASS
constructor FXCheckBox.Create(aOwner: TComponent);
begin
  inherited;
  FIconFont := TFont.Create;
  FIconFont.Name := 'Segoe Fluent Icons';
  FIconFont.Size := 12;
  FAllowGrayed := false;
  FState := cbsUnchecked;
  FTransparent := true;
  FTextSpacing := 6;
  ParentColor := true;
  FAutomaticMouseCursor := false;

  // Custom Color
  FCustomColors := FXColorSets.Create();
  FIconAccentColors := FXColorStateSet.Create;

  FText := 'Fluent Checkbox';

  // Sizing
  Height := 30;
  Width := 180;

  // Update
  UpdateColors;
  UpdateRects;
end;
destructor FXCheckBox.Destroy;
begin
  FIconFont.Free;
  FreeAndNil( FCustomColors );
  FreeAndNil( FIconAccentColors );
  inherited;
end;
//  CUSTOM METHODS
procedure FXCheckBox.ChangeScale(M, D: Integer{$IF CompilerVersion > 29}; isDpiChange: Boolean{$ENDIF});
begin
  inherited;
  FIconFont.Height := MulDiv(FIconFont.Height, M, D);
  FTextSpacing := MulDiv(FTextSpacing, M, D);
  UpdateRects;
end;

procedure FXCheckBox.Paint;
begin
  inherited;
  //  Paint background
  if not Transparent then
    begin
      Canvas.Brush.Style := bsSolid;
      Canvas.Brush.Handle := CreateSolidBrushWithAlpha(Color, 255);
      Canvas.RoundRect(Rect(0, 0, Width, Height), CHECKBOX_BOX_ROUND, CHECKBOX_BOX_ROUND);
    end;

  //  Draw text
  Canvas.Brush.Style := bsClear;
  Canvas.Font.Assign(Font);
  Canvas.Font.Color := TextColor;
  DrawTextRect(Canvas, taLeftJustify, taVerticalCenter, TextRect, Text, Transparent);

  //  Set Brush Accent Color
  Canvas.Font.Assign(IconFont);
  Canvas.Font.Color := FIconAccentColors.GetColor(FControlState);

  //  Draw icon
  case State of
    cbsChecked:
      begin
        DrawTextRect(Canvas, taCenter, taVerticalCenter, IconRect, CHECKBOX_CHECKED, Transparent);
      end;
    cbsUnchecked:
      begin
        Canvas.Font.Color := TextColor;
        DrawTextRect(Canvas, taCenter, taVerticalCenter, IconRect, CHECKBOX_OUTLINE, Transparent);
      end;
    cbsGrayed:
      begin
        DrawTextRect(Canvas, taCenter, taVerticalCenter, IconRect, CHECKBOX_FILL, Transparent);
        Canvas.Font.Color := TextColor;
        DrawTextRect(Canvas, taCenter, taVerticalCenter, IconRect, CHECKBOX_GRAYED, Transparent);
      end;
  end;
end;

procedure FXCheckBox.Resize;
begin
  inherited;
  UpdateRects;
end;

//  MESSAGES
procedure FXCheckBox.WM_LButtonUp(var Msg: TWMLButtonUp);
begin
  if not Enabled then exit;
  {if PtInRect(IconRect, Msg.Pos) then
    begin }
      FControlState := csHover;

      if AllowGrayed then   //  Unchecked > Checked > Grayed > ...
        case State of
          cbsUnchecked:
            State := cbsChecked;
          cbsChecked:
            State := cbsGrayed;
          cbsGrayed:
            State := cbsUnchecked;
        end
      else
        case State of
          cbsUnchecked:
            State := cbsChecked;
          cbsChecked:
            State := cbsUnchecked;
          cbsGrayed:
            State := cbsUnchecked;
        end;
  inherited;
end;
procedure FXCheckBox.CMMouseEnter(var Message: TMessage);
begin
  FControlState := csHover;
  Paint;
end;

procedure FXCheckBox.CMMouseLeave(var Message: TMessage);
begin
  FControlState := csNone;
  Paint;
end;

procedure FXCheckBox.CM_EnabledChanged(var Msg: TMessage);
begin
  UpdateColors;
  Invalidate;
  inherited;
end;
end.
