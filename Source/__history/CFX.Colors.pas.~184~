{$M+}

unit CFX.Colors;

interface

uses
  Winapi.Windows, Vcl.Graphics, Types, UITypes, Classes, Vcl.Forms, Math,
  CFX.Classes;

  type
    FXPersistentColor = class(TPersistent)
      Owner : TPersistent;
      constructor Create(AOwner : TPersistent); overload; virtual;
    end;

    { Complete Color State Set }
    FXColorStateSets = class(FXPersistentColor)
      private
        FEnable: boolean;

        FAccent,
        FLightBackGroundNone,
        FLightBackGroundHover,
        FLightBackGroundPress,
        FLightForeGroundNone,
        FLightForeGroundHover,
        FLightForeGroundPress,
        FDarkBackGroundNone,
        FDarkBackGroundHover,
        FDarkBackGroundPress,
        FDarkForeGroundNone,
        FDarkForeGroundHover,
        FDarkForeGroundPress: TColor;

        procedure SetStateColor(const Index: Integer; const Value: TColor);
      public
        constructor Create;

        function GetColor(const DarkTheme, Foreground: boolean; State: FXControlState): TColor;

      published
        property Enabled: boolean read FEnable write FEnable;

        property Accent: TColor read FAccent write FAccent;
        property LightBackgroundNone: TColor index 0 read FLightBackGroundNone write SetStateColor;
        property LightBackgroundHover: TColor index 1 read FLightBackGroundHover write SetStateColor;
        property LightBackgroundPress: TColor index 2 read FLightBackGroundPress write SetStateColor;
        property LightForeGroundNone: TColor index 3 read FLightForeGroundNone write SetStateColor;
        property LightForeGroundHover: TColor index 4 read FLightForeGroundHover write SetStateColor;
        property LightForeGroundPress: TColor index 5 read FLightForeGroundPress write SetStateColor;
        property DarkBackGroundNone: TColor index 6 read FDarkBackGroundNone write SetStateColor;
        property DarkBackGroundHover: TColor index 7 read FDarkBackGroundHover write SetStateColor;
        property DarkBackGroundPress: TColor index 8 read FDarkBackGroundPress write SetStateColor;
        property DarkForeGroundNone: TColor index 9 read FDarkForeGroundNone write SetStateColor;
        property DarkForeGroundHover: TColor index 10 read FDarkForeGroundHover write SetStateColor;
        property DarkForeGroundPress: TColor index 11 read FDarkForeGroundPress write SetStateColor;
    end;

    // Color State Set
    FXColorStateSet = class(FXPersistentColor)
      private
        FEnable: boolean;

        FAccent,
        FBackGroundNone,
        FBackGroundHover,
        FBackGroundPress,
        FForeGroundNone,
        FForeGroundHover,
        FForeGroundPress: TColor;
      public
        constructor Create(AFrom: FXColorStateSets; const DarkColor: boolean);

        function GetColor(const Foreground: boolean; State: FXControlState): TColor;

      published
        property Enabled: boolean read FEnable write FEnable;

        property Accent: TColor read FAccent write FAccent;
        property BackgroundNone: TColor index 0 read FBackGroundNone write FBackGroundNone;
        property BackgroundHover: TColor index 1 read FBackGroundHover write FBackGroundHover;
        property BackgroundPress: TColor index 2 read FBackGroundPress write FBackGroundPress;
        property ForeGroundNone: TColor index 3 read FForeGroundNone write FForeGroundNone;
        property ForeGroundHover: TColor index 4 read FForeGroundHover write FForeGroundHover;
        property ForeGroundPress: TColor index 5 read FForeGroundPress write FForeGroundPress;
    end;

    { Color State Sets }
    FXSingleColorStateSets = class(FXPersistentColor)
      private
        FEnable: boolean;

        FAccent,
        FLightNone,
        FLightHover,
        FLightPress,
        FDarkNone,
        FDarkHover,
        FDarkPress: TColor;

        procedure SetStateColor(const Index: Integer; const Value: TColor);
      public
        constructor Create;

        procedure SetLightColor(None, Hover, Press: TColor);
        procedure SetDarkColor(None, Hover, Press: TColor);
        function GetColor(const DarkTheme: boolean; State: FXControlState): TColor;

      published
        property Enabled: boolean read FEnable write FEnable;

        property Accent: TColor read FAccent write FAccent;
        property LightNone: TColor index 0 read FLightNone write SetStateColor;
        property LightHover: TColor index 1 read FLightHover write SetStateColor;
        property LightPress: TColor index 2 read FLightPress write SetStateColor;
        property DarkNone: TColor index 3 read FDarkNone write SetStateColor;
        property DarkHover: TColor index 4 read FDarkHover write SetStateColor;
        property DarkPress: TColor index 5 read FDarkPress write SetStateColor;
    end;

    { Color State Set }
    FXSingleColorStateSet = class(FXPersistentColor)
      private
        FEnable: boolean;

        FAccent,
        FNone,
        FHover,
        FPress: TColor;

      public
        constructor Create(ANone, AHover, APress: TColor); overload;
        constructor Create(Colors: FXSingleColorStateSets; const DarkTheme: boolean = false); overload;

        procedure SetStateColor(const Index: Integer; const Value: TColor);
        function GetColor(const State: FXControlState): TColor;

        procedure CopyFrom(FromSet: FXSingleColorStateSet);

      published
        property Enabled: boolean read FEnable write FEnable;

        property Accent: TColor read FAccent write FAccent;
        property None: TColor read FNone write FNone;
        property Hover: TColor read FHover write FHover;
        property Press: TColor read FPress write FPress;
    end;

    { Complete color sets with both Dark and Light theme }
    FXColorSets = class(FXPersistentColor)
      private
        FEnable: boolean;
        FAccent,
        FLightBackGround,
        FLightForeground,
        FDarkBackGround,
        FDarkForeground: TColor;

      public
        constructor Create(FocusControl: boolean = false);

      published
        property Enabled: boolean read FEnable write FEnable;

        property Accent: TColor read FAccent write FAccent;
        property LightBackGround: TColor read FLightBackGround write FLightBackGround;
        property LightForeGround: TColor read FLightForeGround write FLightForeGround;
        property DarkBackGround: TColor read FDarkBackGround write FDarkBackGround;
        property DarkForeGround: TColor read FDarkForeground write FDarkForeground;
    end;

    // Interited from Basic Color Sets
    FXCompleteColorSets = class(FXColorSets)
      private
        FLightBackGroundInterior,
        FDarkBackGroundInterior: TColor;

      public
        constructor Create;

      published
        property LightBackGroundInterior: TColor read FLightBackGroundInterior write FLightBackGroundInterior;
        //
        property DarkBackGroundInterior: TColor read FDarkBackGroundInterior write FDarkBackGroundInterior;
    end;

    { Single Color Set with one option }
    FXColorSet = class(FXPersistentColor)
      private
        FAccent,
        FBackGround,
        FForeground: TColor;

      public
        constructor Create; overload;
        constructor Create(AAccent, ABackGround, AForeGround: TColor); overload;
        constructor Create(Colors: FXColorSets; const DarkColor: boolean = false); overload;

        procedure UpdateSource;

      published
        property Accent: TColor read FAccent write FAccent;
        property BackGround: TColor read FBackGround write FBackGround;
        property ForeGround: TColor read FForeGround write FForeGround;
    end;

    // Inherited from basic color set
    FXCompleteColorSet = class(FXColorSet)
      private
        FBackGroundInterior: TColor;

      public
        constructor Create(Colors: FXCompleteColorSets; DarkColor: boolean = false); overload;

        procedure UpdateSource;

      published
        property BackGroundInterior: TColor read FBackGroundInterior write FBackGroundInterior;
    end;

  // Color Functions
  function ChangeColorLight( clr: TColor; changeby: integer ): TColor;
  function GetColorLight( clr: TColor ): integer;
  function GetColorGrayScale( clr: TColor ): TColor;
  function GetTextColorFromBackground(BackGround: TColor): TColor;
  function ColorBlend(Color1, Color2: TColor; A: Byte): TColor;
  function GetMaxFontSize(Canvas: TCanvas; Text: string; MaxWidth, MaxHeight: Integer): integer;
  procedure GradHorizontal(Canvas:TCanvas; Rect:TRect; FromColor, ToColor:TColor);
  procedure GradVertical(Canvas:TCanvas; Rect:TRect; FromColor, ToColor:TColor);
  procedure PrepareCustomTitleBar(var TitleBar: TForm; const Background: TColor; Foreground: TColor);

  const
    DEFAULT_ACCENT_COLOR = 13924352;

    DEFAULT_DARK_BACKGROUND_COLOR = 2105376;
    DEFAULT_DARK_BACKGROUNDCONTROL_COLOR = 2829099;
    DEFAULT_DARK_GRAY_CONTROL_COLOR = 10657693;
    DEFAULT_DARK_GRAY_CONTROL_HOVER_COLOR = 12039603;
    DEFAULT_DARK_GRAY_CONTROL_PRESS_COLOR = 9275783;
    DEFAULT_DARK_GRAY_CONTROL_FONT_COLOR = 16777215;
    DEFAULT_DARK_GRAY_CONTROL_HOVER_FONT_COLOR = 16777215;
    DEFAULT_DARK_GRAY_CONTROL_PRESS_FONT_COLOR = 13553358;
    DEFAULT_DARK_FOREGROUND_COLOR = 16777215;

    DEFAULT_LIGHT_BACKGROUND_COLOR = 15987699;
    DEFAULT_LIGHT_BACKGROUNDCONTROL_COLOR = 16514043;
    DEFAULT_LIGHT_GRAY_CONTROL_COLOR = 9145227;
    DEFAULT_LIGHT_GRAY_CONTROL_HOVER_COLOR = 10461087;
    DEFAULT_LIGHT_GRAY_CONTROL_PRESS_COLOR = 7697781;
    DEFAULT_LIGHT_GRAY_CONTROL_FONT_COLOR = 1776411;
    DEFAULT_LIGHT_GRAY_CONTROL_HOVER_FONT_COLOR = 1776411;
    DEFAULT_LIGHT_GRAY_CONTROL_PRESS_FONT_COLOR = 8882055;
    DEFAULT_LIGHT_FOREGROUND_COLOR = 1776410;

    GENERIC_DARK_FONT_COLOR = 15987699;
    GENERIC_LIGHT_FONT_COLOR = 2105376;

    GRAYSCALE_DIV_CONST = 3;

implementation


function ChangeColorLight( clr: TColor; changeby: integer ): TColor;
var
  RBGval: longint;
  R, G, B: integer;
begin
  RBGval := ColorToRGB(clr);
  R := GetRValue(RBGval);
  G := GetGValue(RBGval);
  B := GetBValue(RBGval);

  R := R + changeby;
  G := G + changeby;
  B := B + changeby;

  if R < 0 then R := 0;
  if G < 0 then G := 0;
  if B < 0 then B := 0;

  if R > 255 then R := 255;
  if G > 255 then G := 255;
  if B > 255 then B := 255;

  Result := RGB(r,g,b);
end;

function GetColorLight( clr: TColor ): integer;
var
  l1, l2, l3: real;
begin
  l1 := GetRValue(clr);
  l2 := GetGValue(clr);
  l3 := GetBValue(clr);

  Result := trunc((l1 + l2 + l3)/3);
end;

function GetColorGrayScale( clr: TColor ): TColor;
var
  RBGval: longint;
  R, G, B: integer;
begin
  RBGval := ColorToRGB(clr);
  R := GetRValue(RBGval);
  G := GetGValue(RBGval);
  B := GetBValue(RBGval);

  R:= (R+G+B) div GRAYSCALE_DIV_CONST;
  G:= R; B:=R;

  Result := RGB(r,g,b);
end;

function GetTextColorFromBackground(BackGround: TColor): TColor;
begin
  if GetColorLight( BackGround ) > 150 then
    Result := GENERIC_LIGHT_FONT_COLOR
  else
    Result := GENERIC_DARK_FONT_COLOR;
end;

function ColorBlend(Color1, Color2: TColor; A: Byte): TColor;
var
  c1, c2: LongInt;
  r, g, b, v1, v2: byte;
begin
  A:= Round(2.55 * A);
  c1 := ColorToRGB(Color1);
  c2 := ColorToRGB(Color2);
  v1:= Byte(c1);
  v2:= Byte(c2);
  r:= A * (v1 - v2) shr 8 + v2;
  v1:= Byte(c1 shr 8);
  v2:= Byte(c2 shr 8);
  g:= A * (v1 - v2) shr 8 + v2;
  v1:= Byte(c1 shr 16);
  v2:= Byte(c2 shr 16);
  b:= A * (v1 - v2) shr 8 + v2;
  Result := (b shl 16) + (g shl 8) + r;
end;

function GetMaxFontSize(Canvas: TCanvas; Text: string; MaxWidth, MaxHeight: Integer): integer;
// Font should be set up with desired Name/Style/etc.
var
  Ext: TSize;
begin
  Result := 0;
  if Text = '' then
    Exit;

  Canvas.Font.Size := 10;
  repeat
    Canvas.Font.Size := Canvas.Font.Size + 1;
    Ext := Canvas.TextExtent(Text);
  until ((Ext.cx >= MaxWidth) or (Ext.cy >= MaxHeight));
  repeat
    Canvas.Font.Size := Canvas.Font.Size - 1;
    Ext := Canvas.TextExtent(Text);
  until ((Ext.cx <= MaxWidth) and (Ext.cy <= MaxHeight)) or (Canvas.Font.Size = 1);

  Result := Canvas.Font.Size;
end;

procedure GradHorizontal(Canvas:TCanvas; Rect:TRect; FromColor, ToColor:TColor);
var
   X: integer;
   dr, dg, db:Extended;
   r1, r2, g1, g2, b1, b2:Byte;
   R, G, B:Byte;
   cnt, csize:integer;
begin
  //Unpack Colors
  tocolor := ColorToRGB(tocolor);
  fromcolor := ColorToRGB(fromcolor);

   R1 := GetRValue(FromColor) ;
   G1 := GetGValue(FromColor) ;
   B1 := GetBValue(FromColor) ;

   R2 := GetRValue(ToColor) ;
   G2 := GetGValue(ToColor) ;
   B2 := GetBValue(ToColor) ;

   // Calculate Width
   csize := Rect.Right-Rect.Left;
   if csize <= 0 then Exit;

   // Get Color mdi
   dr := (R2-R1) / csize;
   dg := (G2-G1) / csize;
   db := (B2-B1) / csize;

   // Start Draw
   cnt := 0;
   for X := Rect.Left to Rect.Right-1 do
   begin
     R := R1+Ceil(dr*cnt) ;
     G := G1+Ceil(dg*cnt) ;
     B := B1+Ceil(db*cnt) ;

     Canvas.Pen.Color := RGB(R,G,B) ;
     Canvas.MoveTo(X,Rect.Top) ;
     Canvas.LineTo(X,Rect.Bottom) ;
     inc(cnt) ;
   end;
end;

procedure GradVertical(Canvas:TCanvas; Rect:TRect; FromColor, ToColor:TColor);
var
   Y: integer;
   dr, dg, db:Extended;
   r1, r2, g1, g2, b1, b2:Byte;
   R, G, B:Byte;
   cnt, csize:integer;
begin
  //Unpack Colors
  tocolor := ColorToRGB(tocolor);
  fromcolor := ColorToRGB(fromcolor);

   R1 := GetRValue(FromColor) ;
   G1 := GetGValue(FromColor) ;
   B1 := GetBValue(FromColor) ;

   R2 := GetRValue(ToColor) ;
   G2 := GetGValue(ToColor) ;
   B2 := GetBValue(ToColor) ;

   // Calculate Width
   csize := Rect.Bottom-Rect.Top;
   if csize <= 0 then Exit;

   // Get Color mdi
   dr := (R2-R1) / csize;
   dg := (G2-G1) / csize;
   db := (B2-B1) / csize;

   // Start Draw
   cnt := 0;
   for Y := Rect.Top to Rect.Bottom-1 do
   begin
     R := R1+Ceil(dr*cnt) ;
     G := G1+Ceil(dg*cnt) ;
     B := B1+Ceil(db*cnt) ;

     Canvas.Pen.Color := RGB(R,G,B) ;
     Canvas.MoveTo(Rect.Left,Y) ;
     Canvas.LineTo(Rect.Right,Y) ;
     inc(cnt) ;
   end;
end;

procedure PrepareCustomTitleBar(var TitleBar: TForm; const Background: TColor; Foreground: TColor);
var
  CB, CF, SCB, SCF: integer;
begin
  if GetColorLight(BackGround) < 100 then
    CB := 30
  else
    CB := -30;

  if GetColorLight(Foreground) < 100 then
    CF := 30
  else
    CF := -30;

  SCF := CF div 2;
  SCB := CF div 2;

  with TitleBar.CustomTitleBar do
    begin
      BackgroundColor := BackGround;
      InactiveBackgroundColor := BackGround;
      ButtonBackgroundColor := BackGround;
      ButtonHoverBackgroundColor := ChangeColorLight(BackGround, SCB);
      ButtonInactiveBackgroundColor := BackGround;
      ButtonPressedBackgroundColor := ChangeColorLight(BackGround, CB);

      ForegroundColor := Foreground;
      ButtonForegroundColor := Foreground;
      ButtonHoverForegroundColor := ChangeColorLight(ForeGround, SCF);
      InactiveForegroundColor := ChangeColorLight(Foreground, CF);
      ButtonInactiveForegroundColor := ChangeColorLight(Foreground, CF);
      ButtonPressedForegroundColor := ChangeColorLight(Foreground, CF);
    end;
end;

{ FXColorSet }

constructor FXColorSets.Create(FocusControl: boolean);
begin
  inherited Create;

  Accent := DEFAULT_ACCENT_COLOR;

  DarkForeGround := DEFAULT_DARK_FOREGROUND_COLOR;
  LightForeGround := DEFAULT_LIGHT_FOREGROUND_COLOR;

  if FocusControl then
    begin
      DarkBackGround := DEFAULT_DARK_BACKGROUNDCONTROL_COLOR;
      LightBackGround := DEFAULT_LIGHT_BACKGROUNDCONTROL_COLOR;
    end
      else
    begin
      DarkBackGround := DEFAULT_DARK_BACKGROUND_COLOR;
      LightBackGround := DEFAULT_LIGHT_BACKGROUND_COLOR;
    end;
end;

constructor FXColorSet.Create;
begin
  inherited Create;

  Accent := DEFAULT_ACCENT_COLOR;
end;

constructor FXColorSet.Create(AAccent, ABackGround, AForeGround: TColor);
begin
  inherited Create;

  Accent := AAccent;

  BackGround := ABackGround;
  ForeGround := AForeGround;
end;

constructor FXColorSet.Create(Colors: FXColorSets; const DarkColor: boolean);
begin
  inherited Create;

  // Load Colors from a complete color set
  Accent := Colors.Accent;

  if DarkColor then
    begin
      BackGround := Colors.DarkBackGround;
      ForeGround := Colors.DarkForeGround;
    end
      else
    begin
      BackGround := Colors.LightBackGround;
      ForeGround := Colors.LightForeGround;
    end;
end;

procedure FXColorSet.UpdateSource;
begin

end;

{ FXCompleteColorSets }

constructor FXCompleteColorSets.Create;
begin
  inherited Create;

  Accent := DEFAULT_ACCENT_COLOR;

  LightForeGround := DEFAULT_LIGHT_FOREGROUND_COLOR;
  LightBackGround := DEFAULT_LIGHT_BACKGROUND_COLOR;
  LightBackGroundInterior := DEFAULT_LIGHT_BACKGROUNDCONTROL_COLOR;

  DarkForeGround := DEFAULT_DARK_FOREGROUND_COLOR;
  DarkBackGround := DEFAULT_DARK_BACKGROUND_COLOR;
  DarkBackGroundInterior := DEFAULT_DARK_BACKGROUNDCONTROL_COLOR;
end;

{ FXPersistentColor }

constructor FXPersistentColor.Create(AOwner: TPersistent);
begin
  inherited Create;
  Owner := AOwner;
end;

{ FXColorStateSet }

constructor FXSingleColorStateSets.Create;
begin
  inherited Create;

  FAccent := DEFAULT_ACCENT_COLOR;

  FLightNone := DEFAULT_LIGHT_GRAY_CONTROL_COLOR;
  FLightHover := DEFAULT_LIGHT_GRAY_CONTROL_HOVER_COLOR;
  FLightPress := DEFAULT_LIGHT_GRAY_CONTROL_PRESS_COLOR;
  //
  FDarkNone := DEFAULT_DARK_GRAY_CONTROL_COLOR;
  FDarkHover := DEFAULT_DARK_GRAY_CONTROL_HOVER_COLOR;
  FDarkPress := DEFAULT_DARK_GRAY_CONTROL_PRESS_COLOR;
end;

function FXSingleColorStateSets.GetColor(const DarkTheme: boolean;
  State: FXControlState): TColor;
var
  ResultCode: Byte;
begin
  ResultCode := 0;
  //  Calculating color index
  if DarkTheme then
    inc(ResultCode, 3);   //  Skip 6 light color

  inc(ResultCode, Ord(State));
  //  Get color by index
  case ResultCode of
    0:
      Result := LightNone;
    1:
      Result := LightHover;
    2:
      Result := LightPress;
    3:
      Result := DarkNone;
    4:
      Result := DarkHover;
    5:
      Result := DarkPress;
    else
      Result := 0;
  end;
end;

procedure FXSingleColorStateSets.SetDarkColor(None, Hover, Press: TColor);
begin

end;

procedure FXSingleColorStateSets.SetLightColor(None, Hover, Press: TColor);
begin

end;

procedure FXSingleColorStateSets.SetStateColor(const Index: Integer; const Value: TColor);
begin
  case Index of
    0:
      if Value <> FLightNone then
        FLightNone := Value;
    1:
      if Value <> FLightHover then
        FLightHover := Value;
    2:
      if Value <> FLightPress then
        FLightPress := Value;
    3:
      if Value <> FDarkNone then
        FDarkNone := Value;
    4:
      if Value <> FDarkHover then
        FDarkHover := Value;
    5:
      if Value <> FDarkPress then
        FDarkPress := Value;
  end;
end;

{ FXColorStateSet }

constructor FXSingleColorStateSet.Create(ANone, AHover, APress: TColor);
begin
  inherited Create;

  None := ANone;
  Hover := AHover;
  Press := APress;
end;

procedure FXSingleColorStateSet.CopyFrom(FromSet: FXSingleColorStateSet);
begin
  Accent := FromSet.Accent;

  None := FromSet.None;
  Hover := FromSet.Hover;
  Press := FromSet.Press;
end;

constructor FXSingleColorStateSet.Create(Colors: FXSingleColorStateSets;
  const DarkTheme: boolean);
begin
  inherited Create;

  None := Colors.GetColor(DarkTheme, csNone);
  Hover := Colors.GetColor(DarkTheme, csHover);
  Press := Colors.GetColor(DarkTheme, csPress);
end;

function FXSingleColorStateSet.GetColor(const State: FXControlState): TColor;
begin
  Result := 0;
  case State of
    csNone: Result := None;
    csHover: Result := Hover;
    csPress: Result := Press;
  end;
end;

procedure FXSingleColorStateSet.SetStateColor(const Index: Integer;
  const Value: TColor);
begin

end;

{ FXColorStateSet }

constructor FXColorStateSet.Create(AFrom: FXColorStateSets; const DarkColor: boolean);
begin
  Accent := AFrom.Accent;
  if DarkColor then
    begin
      FBackGroundNone := AFrom.DarkBackGroundNone;
      FBackGroundHover := AFrom.DarkBackGroundHover;
      FBackGroundPress := AFrom.DarkBackGroundPress;
    end
  else
    begin
      FBackGroundNone := AFrom.LightBackGroundNone;
      FBackGroundHover := AFrom.LightBackGroundHover;
      FBackGroundPress := AFrom.LightBackGroundPress;
    end;
end;

function FXColorStateSet.GetColor(const Foreground: boolean;
  State: FXControlState): TColor;
var
  ResultCode: integer;
begin
  ResultCode := 0;
  //  Calculating color index
  if Foreground then
    inc(ResultCode, 3);   // Skip background color

  inc(ResultCode, Ord(State));
  //  Get color by index
  case ResultCode of
    0:
      Result := BackGroundNone;
    1:
      Result := BackGroundHover;
    2:
      Result := BackGroundPress;
    3:
      Result := ForeGroundNone;
    4:
      Result := ForeGroundHover;
    5:
      Result := ForeGroundPress;
    else
      Result := 0;
  end;
end;

{ FXCompleteColorSet }

constructor FXCompleteColorSet.Create(Colors: FXCompleteColorSets;
  DarkColor: boolean);
begin
  inherited Create;
  // Inherited function for basic color
  Self.Create(Colors as FXColorSets, DarkColor);

  // Get by theme for Interior
  if DarkColor then
    FBackGroundInterior := Colors.FDarkBackGroundInterior
  else
    FBackGroundInterior := Colors.LightBackGroundInterior;
end;

procedure FXCompleteColorSet.UpdateSource;
begin

end;

{ FXColorStateSets }

constructor FXColorStateSets.Create;
begin
  Accent := DEFAULT_ACCENT_COLOR;

  DarkBackGroundNone := DEFAULT_DARK_GRAY_CONTROL_COLOR;
  DarkBackGroundHover := DEFAULT_DARK_GRAY_CONTROL_HOVER_COLOR;
  DarkBackGroundPress := DEFAULT_DARK_GRAY_CONTROL_PRESS_COLOR;
  DarkForeGroundNone := DEFAULT_DARK_GRAY_CONTROL_FONT_COLOR;
  DarkForeGroundHover := DEFAULT_DARK_GRAY_CONTROL_HOVER_FONT_COLOR;
  DarkForeGroundPress := DEFAULT_DARK_GRAY_CONTROL_PRESS_FONT_COLOR;

  LightBackGroundNone := DEFAULT_LIGHT_GRAY_CONTROL_COLOR;
  LightBackGroundHover := DEFAULT_LIGHT_GRAY_CONTROL_HOVER_COLOR;
  LightBackGroundPress := DEFAULT_LIGHT_GRAY_CONTROL_PRESS_COLOR;
  LightForeGroundNone := DEFAULT_LIGHT_GRAY_CONTROL_FONT_COLOR;
  LightForeGroundHover := DEFAULT_LIGHT_GRAY_CONTROL_HOVER_FONT_COLOR;
  LightForeGroundPress := DEFAULT_LIGHT_GRAY_CONTROL_PRESS_FONT_COLOR;
end;

function FXColorStateSets.GetColor(const DarkTheme, Foreground: boolean;
  State: FXControlState): TColor;
var
  ResultCode: integer;
begin
  ResultCode := 0;
  //  Calculating color index
  if Foreground then
    inc(ResultCode, 3);   // Skip background color

  if DarkTheme then
    inc(ResultCode, 6);   //  Skip light color

  inc(ResultCode, Ord(State));
  //  Get color by index
  case ResultCode of
    0:
      Result := LightBackGroundNone;
    1:
      Result := LightBackGroundHover;
    2:
      Result := LightBackGroundPress;
    3:
      Result := LightForeGroundNone;
    4:
      Result := LightForeGroundHover;
    5:
      Result := LightForeGroundPress;
    6:
      Result := DarkBackGroundNone;
    7:
      Result := DarkBackGroundHover;
    8:
      Result := DarkBackGroundPress;
    9:
      Result := DarkForeGroundNone;
    10:
      Result := DarkForeGroundHover;
    11:
      Result := DarkForeGroundPress;
    else
      Result := 0;
  end;
end;

procedure FXColorStateSets.SetStateColor(const Index: Integer;
  const Value: TColor);
begin
    case Index of
    0:
      if Value <> FLightBackGroundNone then
        FLightBackGroundNone := Value;
    1:
      if Value <> FLightBackGroundHover then
        FLightBackGroundHover := Value;
    2:
      if Value <> FLightBackGroundPress then
        FLightBackGroundPress := Value;
    3:
      if Value <> FLightForeGroundNone then
        FLightForeGroundNone := Value;
    4:
      if Value <> FLightForeGroundHover then
        FLightForeGroundHover := Value;
    5:
      if Value <> FLightForeGroundPress then
        FLightForeGroundPress := Value;
    6:
      if Value <> FDarkBackGroundNone then
        FDarkBackGroundNone := Value;
    7:
      if Value <> FDarkBackGroundHover then
        FDarkBackGroundHover := Value;
    8:
      if Value <> FDarkBackGroundPress then
        FDarkBackGroundPress := Value;
    9:
      if Value <> FDarkForeGroundNone then
        FDarkForeGroundNone := Value;
    10:
      if Value <> FDarkForeGroundHover then
        FDarkForeGroundHover := Value;
    11:
      if Value <> FDarkForeGroundPress then
        FDarkForeGroundPress := Value;
  end;
end;

end.
