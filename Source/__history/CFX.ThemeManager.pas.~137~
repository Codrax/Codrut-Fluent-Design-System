unit CFX.ThemeManager;

{$TYPEINFO ON}

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, Registry, System.UITypes,
  Types, Vcl.Graphics, CFX.Colors, CFX.Utilities, Vcl.ExtCtrls, Vcl.Dialogs,
  Vcl.Forms, Classes, Vcl.Themes, Vcl.Styles;

  type
    // Define Control type to identify on update
    FXControl = interface
      ['{5098EF5C-0451-490D-A0B2-24C414F21A24}']
      function IsContainer: Boolean;
      procedure UpdateTheme(const UpdateChidlren: Boolean);
    end;

    // Theme Change Detection
    FXThemeType = (fttRedraw, fttColorization, fttAppTheme);
    FXThemeChange = procedure(Sender: TObject; ThemeChange: FXThemeType; DarkTheme: boolean; Accent: TColor) of object;

    // Persistent
      TMPersistent = class(TPersistent)
        Owner : TPersistent;
        constructor Create(AOwner : TPersistent); overload; virtual;
      end;

    // Color Types
    FXColorType = (fctForeground, fctAccent, fctBackGround, fctContent);
    FXDarkSetting = (fdsAuto, fdsForceDark, fdsForceLight);

    // Theme Manager
    FXThemeManager = class
      constructor Create;
      destructor Destroy;

    private
      FRegistryMonitor: TTimer;

      FDarkTheme: boolean;
      FDarkThemeMode: FXDarkSetting;

      // Private Declarations
      procedure RegMonitorProc(Sender: TObject);
      procedure SetDarkTheme(const Value: boolean);
      procedure SetDarkMode(const Value: FXDarkSetting);

    published
      property DarkTheme: boolean read FDarkTheme write SetDarkTheme;
      property DarkThemeMode: FXDarkSetting read FDarkThemeMode write SetDarkMode;

    public
      // Global Colors
      SystemColorSet: FXCompleteColorSets;
      SystemColor: FXCompleteColorSet;
      SystemGrayControl: FXColorStateSets;
      SystemAccentInteractStates: FXColorStateSet;

      // Tool Tip
      ToolTip: FXCompleteColorSets;

      function AccentColor: TColor;

      procedure UpdateColors;
      procedure UpdateSettings;
    end;

  // Functions
  function IsDesigning: boolean;

  function ThemeManager: FXThemeManager;
  function ExtractColor(ColorSet: FXColorSets; ClrType: FXColorType): TColor;

  var
    ThemeMgr: FXThemeManager;

implementation

// In Design Mode
function IsDesigning: boolean;
begin
  if TStyleManager.ActiveStyle.Name = 'Mountain_Mist' then
    Result := true
  else
    Result := false;
end;

// Get Theme Manager
function ThemeManager: FXThemeManager;
begin
  { Application free attempt }
  {if (csDestroying in Application.ComponentState) and false then
    begin
      if ThemeMgr <> nil then
        ThemeMgr.Free;

      Abort;
    end; }

  { Create Theme Manager }
    if ThemeMgr = nil then
      ThemeMgr := FXThemeManager.Create;

  Result := ThemeMgr;
end;

function ExtractColor(ColorSet: FXColorSets; ClrType: FXColorType): TColor;
begin
  Result := 0;
  if ThemeManager.DarkTheme then
  case ClrType of
    fctForeground: Result := ColorSet.DarkForeGround;
    fctBackGround: Result := ColorSet.DarkBackGround;
    fctAccent: Result := ColorSet.Accent;
  end
    else
  case ClrType of
    fctForeground: Result := ColorSet.LightForeGround;
    fctBackGround: Result := ColorSet.LightBackGround;
    fctAccent: Result := ColorSet.Accent;
  end;
end;

{ FXThemeManager }

function FXThemeManager.AccentColor: TColor;
begin
  Result := SystemColor.Accent;
end;

constructor FXThemeManager.Create;
begin
  // Load Settings
  if IsDesigning then
    FDarkTheme := false
  else
    FDarkTheme := CFX.Utilities.GetAppsUseDarkTheme;

  DarkThemeMode := fdsAuto;
  
  // Default Color Sets
  SystemColorSet := FXCompleteColorSets.Create;
  SystemColor := FXCompleteColorSet.Create(SystemColorSet, DarkTheme);
  SystemGrayControl := FXColorStateSets.Create;
  SystemAccentInteractStates := FXColorStateSet.Create(SystemGrayControl, DarkTheme);

  UpdateColors;

  ToolTip := FXCompleteColorSets.Create;

  { IGNORE IF IDE MODE! }
  if not IsDesigning then
    begin
      // Registry Monitor
      FRegistryMonitor := TTimer.Create(nil);
      with FRegistryMonitor do
        begin
          Enabled := true;
          Interval := 100;

          OnTimer := RegMonitorProc;
        end;
    end;
end;

destructor FXThemeManager.Destroy;
begin
  if FRegistryMonitor <> nil then
    begin
      FRegistryMonitor.Enabled := false;
      FreeAndNil( FRegistryMonitor );
    end;

  FreeAndNil( ToolTip );
  FreeAndNil( SystemColor );
  FreeAndNil( SystemColorSet );
  FreeAndNil( SystemGrayControl );
end;

procedure FXThemeManager.RegMonitorProc(Sender: TObject);
var
  DrkMode: boolean;
begin
  // Manual theme override
  if FDarkThemeMode <> fdsAuto then
    Exit;

  // Check registry
  DrkMode := GetAppsUseDarkTheme;

  if DrkMode <> DarkTheme then
    begin
      DarkTheme := DrkMode;
    end;
end;

procedure FXThemeManager.SetDarkMode(const Value: FXDarkSetting);
begin
  FDarkThemeMode := Value;

  if Value <> fdsAuto then
    ThemeManager.DarkTheme := Value = fdsForceDark;
end;

procedure FXThemeManager.SetDarkTheme(const Value: boolean);
begin
  if FDarkTheme <> Value then
  begin
    FDarkTheme := Value;

    UpdateSettings;
  end;
end;

procedure FXThemeManager.UpdateColors;
begin
  SystemColor := FXCompleteColorSet.Create(SystemColorSet, DarkTheme);

  SystemColor.Accent := GetAccentColor;
  SystemColorSet.Accent := GetAccentColor;
  SystemGrayControl.Accent := GetAccentColor;
end;

procedure FXThemeManager.UpdateSettings;
var
  I: Integer;
begin
  UpdateColors;

  for I := 0 to Screen.FormCount - 1 do
    if Screen.Forms[i] <> nil then    
      if Supports(Screen.Forms[i], FXControl) then
        (Screen.Forms[i] as FXControl).UpdateTheme(true);
end;

{ TMPersistent }

constructor TMPersistent.Create(AOwner: TPersistent);
begin
  inherited Create;
  Owner := AOwner;
end;

end.

