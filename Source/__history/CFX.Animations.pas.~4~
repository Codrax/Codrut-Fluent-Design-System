{***********************************************************}
{                 Codruts Animation Library                 }
{                                                           }
{                         version 1                         }
{                                                           }
{ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! }
{                                                           }
{                        !DISCLAIMER!                       }
{                                                           }
{           <!> This is a fork of AniVCL by Vuio <!>        }
{             https://github.com/VuioVuio/AniVCL            }
{                                                           }
{ !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! }
{                                                           }
{                                                           }
{                                                           }
{                   -- WORK IN PROGRESS --                  }
{***********************************************************}

unit CFX.Animations;


interface

uses
  System.Classes, System.SysUtils, System.Threading;

type
  TAniSyncProc = reference to procedure (V: Integer);
  TAniDoneProc = reference to procedure;  //  TProc

  TAniFloatSyncProc = reference to procedure (V: Single);

  TAniFunction = reference to function (P: Single): Single;

  TAniKind = (akIn, akOut, akInOut);
  TAniFunctionKind = (
    afkLinear, afkQuadratic, afkCubic, afkQuartic, afkQuintic,
    afkBack, afkBounce, afkExpo, afkSine, afkCircle
    );

  TIntAni = class(TThread)
    var CurrentValue: Integer;

    private
      var FStep: Byte;
      var AniFunction: TAniFunction;

      FOnSync: TAniSyncProc;
      FOnDone: TAniDoneProc;

      FAniKind: TAniKind;
      FAniFunctionKind: TAniFunctionKind;

      FDelayStartTime: Cardinal;
      FDuration: Cardinal;
      FStartValue: Integer;
      FDeltaValue: Integer;

      function UpdateFunction: Boolean;
      procedure UpdateControl;
      procedure DoneControl;

    protected
      procedure Execute; override;

    public
      constructor Create(
        FreeOnFinish: Boolean;
        aAniKind: TAniKind; aAniFunctionKind: TAniFunctionKind;
        aStartValue, aDeltaValue: Integer;
        aSyncProc: TAniSyncProc; aDoneProc: TAniDoneProc);

      //  Events
      property OnSync: TAniSyncProc read FOnSync write FOnSync;
      property OnDone: TAniDoneProc read FOnDone write FOnDone;

      //  Props
      property Step: Byte read FStep write FStep default 25;
      property AniKind: TAniKind read FAniKind write FAniKind default akIn;
      property AniFunctionKind: TAniFunctionKind read FAniFunctionKind write FAniFunctionKind default afkLinear;

      property DelayStartTime: Cardinal read FDelayStartTime write FDelayStartTime default 0;
      property Duration: Cardinal read FDuration write FDuration default 400;
      property StartValue: Integer read FStartValue write FStartValue default 0;
      property DeltaValue: Integer read FDeltaValue write FDeltaValue default 0;
  end;

  TFloatAni = class(TThread)
    var CurrentValue: Single;

    private
      var FStep: Byte;
      var AniFunction: TAniFunction;

      FOnSync: TAniFloatSyncProc;
      FOnDone: TAniDoneProc;

      FAniKind: TAniKind;
      FAniFunctionKind: TAniFunctionKind;

      FDelayStartTime: Cardinal;
      FDuration: Cardinal;
      FStartValue: Single;
      FDeltaValue: Integer;

      function UpdateFunction: Boolean;
      procedure UpdateControl;
      procedure DoneControl;

    protected
      procedure Execute; override;

    public
      constructor Create(
        FreeOnFinish: Boolean;
        aAniKind: TAniKind; aAniFunctionKind: TAniFunctionKind;
        aStartValue, aDeltaValue: Integer;
        aSyncProc: TAniFloatSyncProc);

      //  Events
      property OnSync: TAniFloatSyncProc read FOnSync write FOnSync;
      property OnDone: TAniDoneProc read FOnDone write FOnDone;

      //  Props
      property Step: Byte read FStep write FStep default 25;
      property AniKind: TAniKind read FAniKind write FAniKind default akIn;
      property AniFunctionKind: TAniFunctionKind read FAniFunctionKind write FAniFunctionKind default afkLinear;

      property DelayStartTime: Cardinal read FDelayStartTime write FDelayStartTime default 0;
      property Duration: Cardinal read FDuration write FDuration default 400;
      property StartValue: Single read FStartValue write FStartValue;
      property DeltaValue: Integer read FDeltaValue write FDeltaValue default 0;
  end;

implementation

uses
  System.Math;

{ MAIN CLASS }

constructor TIntAni.Create(
  FreeOnFinish: Boolean;
  aAniKind: TAniKind; aAniFunctionKind: TAniFunctionKind;
  aStartValue, aDeltaValue: Integer;
  aSyncProc: TAniSyncProc; aDoneProc: TAniDoneProc);
begin
  inherited Create(True);

  //  Internal
  CurrentValue := 0;
  AniFunction := nil;

  //  New props
  FStep := 25;
  FAniKind := aAniKind;
  FAniFunctionKind := aAniFunctionKind;

  FDelayStartTime := 0;
  FDuration := 400;
  FStartValue := aStartValue;
  FDeltaValue := aDeltaValue;

  FOnDone := aDoneProc;
  FOnSync := aSyncProc;

  //  Old props
  FreeOnTerminate := FreeOnFinish;

  UpdateFunction;
end;

procedure TIntAni.Execute;
var
  i: Cardinal;
  t, d, TimePerStep: Cardinal;
  b, c: Integer;
begin
  if UpdateFunction = false then exit;
    ///  Update easing function
    ///  Depend on AniKind (In, Out,...) and AniFunctionKind (Linear,...)
    ///  If Result = false (error found), then exit

  d := Duration;
  b := StartValue;
  c := DeltaValue;

  //  Delay start
  Sleep(DelayStartTime);

  //  Calc step by FPS
  TimePerStep := Round(d / Step);

  //  Run
  for i := 1 to Step do
    begin
      t := i * TimePerStep;
      CurrentValue := b + Round(c * AniFunction(t / d));
      Synchronize(UpdateControl);
      Sleep(TimePerStep);
    end;

  //  Finish
  Synchronize(UpdateControl);
  Synchronize(DoneControl);
end;

{ PROCS }

procedure TIntAni.DoneControl;
begin
  if Assigned(FOnDone) then
    FOnDone();
end;

procedure TIntAni.UpdateControl;
begin
  if Assigned(FOnSync) then
    FOnSync(CurrentValue);
end;

{ MAIN CLASS }

constructor TFloatAni.Create(
  FreeOnFinish: Boolean;
  aAniKind: TAniKind; aAniFunctionKind: TAniFunctionKind;
  aStartValue, aDeltaValue: Integer;
  aSyncProc: TAniFloatSyncProc);
begin
  inherited Create(True);

  //  Internal
  CurrentValue := 0;
  AniFunction := nil;

  //  New props
  FStep := 25;
  FAniKind := aAniKind;
  FAniFunctionKind := aAniFunctionKind;

  FDelayStartTime := 0;
  FDuration := 400;
  FStartValue := aStartValue;
  FDeltaValue := aDeltaValue;

  FOnDone := nil;
  FOnSync := aSyncProc;

  //  Old props
  FreeOnTerminate := FreeOnFinish;

  UpdateFunction;
end;

procedure TFloatAni.Execute;
var
  i: Cardinal;
  t, d, TimePerStep: Cardinal;
  c: Integer;
  b: Single;
begin
  if UpdateFunction = false then exit;
    ///  Update easing function
    ///  Depend on AniKind (In, Out,...) and AniFunctionKind (Linear,...)
    ///  If Result = false (error found), then exit

  d := Duration;
  b := StartValue;
  c := DeltaValue;

  //  Delay start
  Sleep(DelayStartTime);

  //  Calc step by FPS
  TimePerStep := Round(d / Step);

  //  Run
  for i := 1 to Step do
    begin
      t := i * TimePerStep;
      CurrentValue := b + Round(c * AniFunction(t / d));
      Synchronize(UpdateControl);
      Sleep(TimePerStep);
    end;

  //  Finish
  Synchronize(UpdateControl);
  Synchronize(DoneControl);
end;

{ PROCS }

procedure TFloatAni.DoneControl;
begin
  if Assigned(FOnDone) then
    FOnDone();
end;

procedure TFloatAni.UpdateControl;
begin
  if Assigned(FOnSync) then
    FOnSync(CurrentValue);
end;

end.
