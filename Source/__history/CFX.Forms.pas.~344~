unit CFX.Forms;

interface

uses
  SysUtils, Classes, Windows, CFX.ToolTip, Vcl.Forms, Vcl.Controls, Vcl.Graphics,
  Vcl.Dialogs, Messages, CFX.ThemeManager, CFX.Colors, CFX.UIConsts,
  Vcl.TitleBarCtrls, CFX.Animations, CFX.Utilities, Vcl.ExtCtrls, CFX.Classes,
  CFX.Types;

type
  FXFormProcedure = procedure(Sender: TObject) of object;

  FXForm = class(TForm, FXControl)
    private
        FCustomColors: FXColorSets;

        FFullScreen: Boolean;

        FMicaEffect: boolean;
        FSmokeEffect: boolean;

        FThemeChange: FXThemeChange;
        FOnMove: FXFormProcedure;

        FAllowThemeChangeAnim: boolean;

        FTitlebarInitialized: boolean;

        FEnableTitlebar: boolean;
        TTlCtrl: TTitleBarpanel;

        Smoke: TForm;

      // Functions
      procedure SetFullScreen(const Value: Boolean);
      procedure CreateSmokeSettings;

      // Messages
      procedure WM_SysCommand(var Msg: TWMSysCommand); message WM_SYSCOMMAND;
      procedure WM_DWMColorizationColorChanged(var Msg: TMessage); message WM_DWMCOLORIZATIONCOLORCHANGED;
      procedure WM_Activate(var Msg: TWMActivate); message WM_ACTIVATE;
      procedure WM_MOVE(var Msg: Tmessage); message WM_MOVE;

      // Procedures
      procedure SetMicaEffect(const Value: boolean);
      procedure SetSmokeEffect(const Value: boolean);

      // Utilities
      procedure FormCloseIgnore(Sender: TObject; var CanClose: Boolean);

    protected
      procedure CreateParams(var Params: TCreateParams); override;
      procedure Paint; override;
      procedure Resize; override;

      procedure DoShow; override;

    public
      constructor Create(aOwner: TComponent); override;
      constructor CreateNew(aOwner: TComponent; Dummy: Integer = 0); override;

      procedure InitForm;
      destructor Destroy; override;

      // Utils
      function IsResizable: Boolean;

      function GetTitlebarHeight: integer;

      // Interface
      function IsContainer: Boolean;
      procedure UpdateTheme(const UpdateChildren: Boolean);

    published
      property MicaEffect: boolean read FMicaEffect write SetMicaEffect;
      property SmokeEffect: boolean read FSmokeEffect write SetSmokeEffect;
      property CustomColors: FXColorSets read FCustomColors write FCustomColors;
      property AllowThemeChangeAnimation: boolean read FAllowThemeChangeAnim write FAllowThemeChangeAnim;
      property FullScreen: Boolean read FFullScreen write SetFullScreen default false;

      // On Change...
      property OnMove: FXFormProcedure read FOnMove write FOnMove;

      // Theming Engine
      property OnThemeChange: FXThemeChange read FThemeChange write FThemeChange;
  end;


implementation

{ FXForm }

constructor FXForm.Create(aOwner: TComponent);
begin
  inherited;

  InitForm;
end;

constructor FXForm.CreateNew(aOwner: TComponent; Dummy: Integer);
begin
  inherited;

  InitForm;
end;

procedure FXForm.CreateParams(var Params: TCreateParams);
begin
  inherited;

  //Params.Style := Params.Style or 200000;
end;

procedure FXForm.CreateSmokeSettings;
var
  p: TTitleBarPanel;
  i: TImage;
begin
  Smoke := TForm.Create(nil);
  Smoke.Position := poDesigned;
  Smoke.BorderStyle := bsSingle;
  Smoke.Caption := '';
  Smoke.BorderIcons := [];
  with Smoke.CustomTitleBar do
    begin
      Enabled := true;
      SystemButtons := false;
      SystemColors := false;

      p := TTitleBarPanel.Create(Smoke);
      p.Parent := Smoke;

      i := TImage.Create(p);
      i.Parent := p;
      i.Align := alClient;

      Control := p;

      BackgroundColor := clBlack;
      InactiveBackgroundColor := clBlack;
    end;
  Smoke.OnCloseQuery := FormCloseIgnore;
  LockWindowUpdate(Smoke.ClientHandle);
  Smoke.AlphaBlend := True;
  Smoke.AlphaBlendValue := FORM_SMOKE_BLEND_VALUE;
  Smoke.Color := clBlack;
end;

destructor FXForm.Destroy;
begin
  FCustomColors.Free;

  inherited;
end;

procedure FXForm.DoShow;
begin
  inherited;
    if not FTitlebarInitialized then
      with Self.CustomTitleBar do
        begin
          Enabled := true;

          SystemButtons := false;
          SystemColors := false;
          SystemHeight := false;

          Height := TTlCtrl.Height;

          Control := TTlCtrl;

          FTitlebarInitialized := true;

          UpdateTheme(false);
        end;
end;

procedure FXForm.InitForm;
label
  skip_titlebar;
var
  I: Integer;
begin
  // Settings
  FCustomColors := FXColorSets.Create();
  Font.Name := ThemeManager.FormFont;
  Font.Height := ThemeManager.FormFontHeight;

  // Effects
  MicaEffect := true;
  CreateSmokeSettings;
  FAllowThemeChangeAnim := true;

  // TitleBar
  FTitlebarInitialized := false;
  FEnableTitlebar := GetNTKernelVersion >= 6.0;
  if not FEnableTitlebar then
    begin
      FTitlebarInitialized := true;
      goto skip_titlebar;
    end;

  for I := 0 to ControlCount - 1 do
    if Controls[I] is TTitleBarPanel then
      begin
        TTlCtrl := TTitleBarPanel(Controls[I]);
        Break;
      end;

  if TTlCtrl = nil then
    begin
      TTlCtrl := TTitlebarPanel.Create(Self);
      TTlCtrl.Parent := Self;
    end;

  // Title Bar End
  skip_titlebar:

  // Initialize Theme Manager
  ThemeManager;
  UpdateTheme(true);
end;

function FXForm.IsContainer: Boolean;
begin
  Result := true;
end;

function FXForm.IsResizable: Boolean;
begin
  Result := BorderStyle in [bsSizeable, bsSizeToolWin];
end;

procedure FXForm.FormCloseIgnore(Sender: TObject; var CanClose: Boolean);
begin
  if SmokeEffect then
    CanClose := false;
end;

function FXForm.GetTitlebarHeight: integer;
var
  I: Integer;
begin
  Result := 0;
  for I := 0 to ControlCount - 1 do
    if Controls[I] is TTitlebarPanel then
      Result := TTitlebarPanel(Controls[I]).Height;
end;

procedure FXForm.Paint;
begin
  inherited;

end;

procedure FXForm.Resize;
begin
  inherited;

end;

procedure FXForm.SetFullScreen(const Value: Boolean);
begin

end;

procedure FXForm.SetMicaEffect(const Value: boolean);
begin
  FMicaEffect := Value;

  if Value then
    begin
      AlphaBlend := true;

      AlphaBlendValue := 251;
    end
      else
    begin
      AlphaBlend := false;
    end;
end;

procedure FXForm.SetSmokeEffect(const Value: boolean);
var
  hani: TIntAni;
  bwd: integer;
begin
  FSmokeEffect := Value;

  if Value then
    begin
      bwd := round( (Width - ClientWidth) / 2 );

      if BorderStyle in [bsSingle, bsSizeable, bsSizeToolWin] then
        begin
          if BorderStyle = bsSingle then
            bwd := bwd - 4;

          // Border Style
          Smoke.BorderStyle := bsDialog;
        end
          else
        begin
          bwd := 0;
        end;

      Smoke.Width := Width - bwd;
      Smoke.Height := Height - round(bwd / 2);

      Smoke.Top := Self.Top;
      Smoke.Left := Self.Left + round(bwd / 2);
    end;

  if Value then
    begin
      Smoke.Visible := true;

      Smoke.AlphaBlendValue := FORM_SMOKE_BLEND_VALUE;
    end
      else
    begin
      hani := TIntAni.Create(true, TAniKind.akIn, TAniFunctionKind.afkLinear,
      Smoke.AlphaBlendValue, -Smoke.AlphaBlendValue,
      procedure(Value: integer)
        begin
          Smoke.AlphaBlendValue := Value
        end,
      procedure
        begin
          Smoke.Visible := false;
        end);

        hani.Duration := 100;

        hani.Start;
    end;
end;

procedure FXForm.UpdateTheme(const UpdateChildren: Boolean);
var
  i: Integer;
  PrevColor, FrmColor, FntColor: TColor;
  a: TIntAni;
  ThemeReason: FXThemeType;
begin
  // Update Colors
  if CustomColors.Enabled then
    begin
      FrmColor := ExtractColor( CustomColors, FXColorType.fctBackGround );
      FntColor := ExtractColor( CustomColors, FXColorType.fctForeground );
    end
  else
    begin
      FrmColor := ThemeManager.SystemColor.BackGround;
      FntColor := ThemeManager.SystemColor.ForeGround;
    end;

  // Transizion Animation
  PrevColor := Self.Color;

  // Theme Change Engine
  if PrevColor <> FrmColor then
    ThemeReason := fttAppTheme
  else
    ThemeReason := fttRedraw;

  // Start Transition
  if Self.Visible and FAllowThemeChangeAnim then
    begin

      a := TIntAni.Create(true, TAniKind.akIn, TAniFunctionKind.afkLinear, 0, 100,
      procedure (Value: integer)
      begin
        Self.Color := ColorBlend(FrmColor, PrevColor, Value);

        if FEnableTitlebar then
          PrepareCustomTitleBar( TForm( Self ), Self.Color, FntColor );
      end,
      procedure
      begin
        Self.Color := FrmColor;
        if FEnableTitlebar then
          PrepareCustomTitleBar( TForm( Self ), FrmColor, FntColor );
      end);

      a.Duration := 80;

      a.Start;
    end
      else
        begin
          Self.Color := FrmColor;
          if FEnableTitlebar then
            PrepareCustomTitleBar( TForm( Self ), FrmColor, FntColor );
        end;

  //  Update tooltip style
  if ThemeManager.DarkTheme then
    HintWindowClass := FXDarkTooltip
  else
    HintWindowClass := FXLightTooltip;

  // Legacy Control Support
  if ThemeManager.LegacyFontColor then
    Font.Color := FntColor;

  // Notify Theme Change
  if Assigned(FThemeChange) then
    FThemeChange(Self, ThemeReason, ThemeManager.DarkTheme, ThemeManager.AccentColor);

  //  Update children
  if IsContainer and UpdateChildren then
    begin
      OutputDebugString(PChar(ComponentCount.ToString));
      OutputDebugString(PChar(ControlCount.ToString));

      LockWindowUpdate(Handle);
      for i := 0 to ControlCount - 1 do
        if Supports(Controls[i], FXControl) then
          (Controls[i] as FXControl).UpdateTheme(UpdateChildren);
      LockWindowUpdate(0);
    end;
end;

procedure FXForm.WM_Activate(var Msg: TWMActivate);
begin
  inherited;

  if Smoke.Visible then
    Smoke.SetFocus;
end;

procedure FXForm.WM_DWMColorizationColorChanged(var Msg: TMessage);
begin
  ThemeManager.UpdateSettings;

  UpdateTheme(true);
end;

procedure FXForm.WM_MOVE(var Msg: Tmessage);
begin
  if Assigned(FOnMove) then
    FOnMove(Self);
end;

procedure FXForm.WM_SysCommand(var Msg: TWMSysCommand);
begin
  inherited;

end;

end.
